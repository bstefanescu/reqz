#!/usr/bin/env node

const yargs = require('yargs');
const { hideBin } = require('yargs/helpers');

const {parseValue} = require('../lib/utils.js');
const Client = require('../lib/client.js');

const argv = yargs(hideBin(process.argv))
    .parserConfiguration({'unknown-options-as-args': true})
    .usage('Usage: $0 [options] <file>')
    .command('* <file>')
    .option('quiet', {
        alias: 'q',
        type: 'boolean',
        description: 'Run quitely. Do not output enything.'
    })
    .option('all', {
        alias: 'a',
        type: 'boolean',
        description: 'Log all the request from the request chain not only the main one.'
    })
    .option('log', {
        alias: 'l',
        type: 'string',
        description: 'Log settings. A list separated by commas. Can be any combination of: "req,reqh,reqb,resh,resb,chain".'
    })
    .option('env', {
        alias: 'e',
        type: 'string',
        description: 'Additional env file to load over the default .env one'
    })
    .option('play', {
        type: 'string',
        description: 'Takes a csv file as value. Play the same request for each set of variables created for each line in the csv file. The csv header is expected to specify the variable names.'
    })
    .argv;


function processVars(vars) {
    if (!vars || !vars.length) return {};
    const result = {};
    for (let i=0,l=vars.length; i<l; i++) {
        let key = vars[i];
        if (!key.startsWith('--')) throw new Error('Unknown option: "'+key+'"');
        key = key.substring(2);
        if (i+1>=l) { // last var
            result[key] = true;
            break;
        }
        let val = vars[i+1];
        if (typeof val === 'string') {
            if (val.startsWith('--')) {
                result[key] = true;
                continue;
            } else {
                result[key] = parseValue(val);
            }
        } else {
            result[key] = val; // boolean?
        }
        i++;
    }
    return result;
}


// only --opt unknown options are accepted and are assumed to be vars defined on command line
// if no vars are defiend {} is returned
const vars = processVars(argv._);


Client.play({
    file: argv.file,
    log: argv.log,
    quiet: argv.quiet,
    all: argv.all,
    vars: vars,
    env: argv.env,
    play: argv.play
}).catch(e => {
    console.error(e);
    process.exit(2);
});
